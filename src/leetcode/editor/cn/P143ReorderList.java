//ÁªôÂÆö‰∏Ä‰∏™ÂçïÈìæË°® LÔºöL0‚ÜíL1‚Üí‚Ä¶‚ÜíLn-1‚ÜíLn Ôºå 
//Â∞ÜÂÖ∂ÈáçÊñ∞ÊéíÂàóÂêéÂèò‰∏∫Ôºö L0‚ÜíLn‚ÜíL1‚ÜíLn-1‚ÜíL2‚ÜíLn-2‚Üí‚Ä¶ 
//
// ‰Ω†‰∏çËÉΩÂè™ÊòØÂçïÁ∫ØÁöÑÊîπÂèòËäÇÁÇπÂÜÖÈÉ®ÁöÑÂÄºÔºåËÄåÊòØÈúÄË¶ÅÂÆûÈôÖÁöÑËøõË°åËäÇÁÇπ‰∫§Êç¢„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->4->2->3. 
//
// Á§∫‰æã 2: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4->5, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->5->2->4->3. 
// Related Topics ÈìæË°® 
// üëç 492 üëé 0

package leetcode.editor.cn;

public class P143ReorderList{
    public static void main(String[] args) {
        Solution solution = new P143ReorderList().new Solution();
        // TO TEST
        System.out.println(solution);
    }
    public class ListNode {
        int val;
        ListNode next;
        ListNode() {}
        ListNode(int val) { this.val = val; }
        ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    }
    //leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head==null)
            return;
        ListNode pos=head,tail=pos,pre=pos;
        while(pos!=null){
            tail= pos;
            pos= pos.next;
        }
        pos=head;
        while(pos!=null){
            if(pos==tail)
                break;;
            pre= pos;
            pos= pos.next;
        }
        if(pre==head)
            return;
        pre.next= null;
        reorderList(head.next);
        tail.next= head.next;
        head.next= tail;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}